"""
Script para verificar la configuraci√≥n de MySQL y Django
"""

import mysql.connector
from mysql.connector import Error
import sys
import os

def verificar_mysql():
    """Verifica que MySQL est√© funcionando correctamente"""
    print("üîç Verificando conexi√≥n a MySQL...")
    
    try:
        conexion = mysql.connector.connect(
            host='localhost',
            database='rutasbodega',
            user='django_user',
            password='django123',
            charset='utf8mb4'
        )
        
        if conexion.is_connected():
            cursor = conexion.cursor()
            
            # Verificar que la base de datos existe
            cursor.execute("SHOW DATABASES;")
            databases = cursor.fetchall()
            print("‚úÖ Conexi√≥n exitosa a MySQL")
            print(f"üìö Bases de datos disponibles: {[db[0] for db in databases]}")
            
            # Verificar tablas en rutasbodega
            cursor.execute("SHOW TABLES;")
            tablas = cursor.fetchall()
            if tablas:
                print(f"üìã Tablas existentes: {[tabla[0] for tabla in tablas]}")
                
                # Contar registros en objetos si existe
                try:
                    cursor.execute("SELECT COUNT(*) FROM objetos;")
                    count = cursor.fetchone()[0]
                    print(f"üìä Objetos en base de datos: {count}")
                except:
                    print("‚ÑπÔ∏è Tabla 'objetos' no existe a√∫n (se crear√° autom√°ticamente)")
            else:
                print("‚ÑπÔ∏è No hay tablas creadas a√∫n (se crear√°n autom√°ticamente)")
            
            cursor.close()
            conexion.close()
            return True
            
    except Error as e:
        print(f"‚ùå Error conectando a MySQL: {e}")
        print("\nüîß Posibles soluciones:")
        print("1. Verificar que MySQL est√© ejecut√°ndose: sudo systemctl status mysqld")
        print("2. Ejecutar script de configuraci√≥n: bash setup_mysql.sh")
        print("3. Verificar credenciales de usuario")
        return False

def verificar_django():
    """Verifica que Django est√© configurado correctamente"""
    print("\nüîç Verificando configuraci√≥n de Django...")
    
    try:
        # Verificar que Django est√© instalado
        import django
        print(f"‚úÖ Django instalado: versi√≥n {django.get_version()}")
        
        # Verificar mysql-connector-python
        import mysql.connector
        print("‚úÖ mysql-connector-python instalado")
        
        # Verificar settings.py (si existe)
        if os.path.exists('casoArquisoft/settings.py'):
            print("‚úÖ Archivo settings.py encontrado")
        else:
            print("‚ö†Ô∏è Archivo settings.py no encontrado en la ruta esperada")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Error en dependencias de Django: {e}")
        print("\nüîß Instalar dependencias:")
        print("pip3 install django mysql-connector-python")
        return False

def ejecutar_migraciones():
    """Ejecuta las migraciones de Django"""
    print("\nüîç Ejecutando migraciones de Django...")
    
    try:
        import subprocess
        
        # Ejecutar makemigrations
        result1 = subprocess.run(['python3', 'manage.py', 'makemigrations'], 
                               capture_output=True, text=True)
        
        if result1.returncode == 0:
            print("‚úÖ makemigrations ejecutado correctamente")
        else:
            print(f"‚ö†Ô∏è makemigrations: {result1.stderr}")
        
        # Ejecutar migrate
        result2 = subprocess.run(['python3', 'manage.py', 'migrate'], 
                               capture_output=True, text=True)
        
        if result2.returncode == 0:
            print("‚úÖ migrate ejecutado correctamente")
            return True
        else:
            print(f"‚ùå Error en migrate: {result2.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando migraciones: {e}")
        return False

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üöÄ Verificaci√≥n del Sistema de Rutas de Bodega")
    print("=" * 50)
    
    # Verificar MySQL
    mysql_ok = verificar_mysql()
    
    # Verificar Django
    django_ok = verificar_django()
    
    # Si todo est√° bien, ejecutar migraciones
    if mysql_ok and django_ok:
        print("\nüéØ Configuraci√≥n b√°sica correcta, ejecutando migraciones...")
        migraciones_ok = ejecutar_migraciones()
        
        if migraciones_ok:
            print("\n‚úÖ ¬°Sistema configurado correctamente!")
            print("\nüöÄ Comandos para ejecutar la aplicaci√≥n:")
            print("   python3 manage.py runserver 0.0.0.0:8000")
            print("\nüåê Acceder desde:")
            print("   http://tu-ip-publica:8000/consultarRutasBodega/")
        else:
            print("\n‚ö†Ô∏è Problemas con las migraciones, revisar configuraci√≥n")
    else:
        print("\n‚ùå Hay problemas en la configuraci√≥n b√°sica")
        print("Revisa los errores anteriores y ejecuta las soluciones sugeridas")

if __name__ == "__main__":
    main()